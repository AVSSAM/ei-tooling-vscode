
synapse_namsepace = http://ws.apache.org/ns/synapse

definitions = <definitions xmlns="http://ws.apache.org/ns/synapse">\n\n</definitions>

api = <api name="$1" context="$2" xmlns="http://ws.apache.org/ns/synapse">\n\t<resource methods="GET" \
   uri-template="$3">\n\t\t<inSequence />$4\n\t\t<outSequence />$5\n\t\t<faultSequence />$6\n\t</resource>\n</api>$7

endpoint.parent = <endpoint name="$1" xmlns="http://ws.apache.org/ns/synapse">\n\t<default />$2\n</endpoint>$3

inbound = <inboundEndpoint name="$1" sequence="$2" protocol="http" suspend="false" \
  xmlns="http://ws.apache.org/ns/synapse">\n\t<parameters>\n\t\t<parameter name="$3">$4</parameter>\n\t\
  </parameters>\n</inboundEndpoint>$5

proxy = <proxy name="$1" startOnLoad="true" transports="http https" xmlns="http://ws.apache.org/ns/synapse">\n\t<target>\
  \n\t\t<inSequence />$2\n\t\t<outSequence />$3\n\t\t<faultSequence />$4\n\t\
  </target>\n</proxy>$5

sequence.parent = <sequence name="$1" xmlns="http://ws.apache.org/ns/synapse">\n\t<log level="custom">$2</log>\n\t\
  <property name="$3" />\n</sequence>$4

registry = <registry provider="$1">$2</registry>$3

inboundEndpoint = <inboundEndpoint xmlns="http://ws.apache.org/ns/synapse" name="$1" sequence="$2" \
  protocol="http" suspend="false">\n\t<parameters>\n\t\t<parameter name="$3">$4</parameter>\n\t</parameters>\
  \n</inboundEndpoint>$5

localEntry = <localEntry key="$1" xmlns="http://ws.apache.org/ns/synapse">$2\n</localEntry>$3

messageStore = <messageStore name="$1" class="$2" xmlns="http://ws.apache.org/ns/synapse">\n\t<parameter name="$3">$4\
  </parameter>$5\n</messageStore>$6

messageProcessor = <messageProcessor name="$1" class="$2" messageStore="$3" xmlns="http://ws.apache.org/ns/synapse">$4\
  \n\t<parameter name="$5">$6</parameter>$7\n</messageProcessor>$8

task = <task name="$1" class="$2" xmlns="http://ws.apache.org/ns/synapse">\n\t<trigger>$3</trigger>\n</task>$4

call = <call>\n\t<endpoint />$1\n</call>$2

call-template = <call-template target="$1">\n\t<with-param name="$2" value="$3" />\n</call-template>$4

drop = <drop />$1

loopback = <loopback />$1

respond = <respond />$1

property = <property name="$1">$2</property>$3

send = <send>\n\t<endpoint />$1\n</send>$2

store = <store messageStore="$1">$2</store>$3

conditionalRouter = <conditionalRouter>\n\t<route breakRoute="false">\n\t\t<condition>$1</condition>\n\t\t<target>$2\
  </target>\n\t</route>\n</conditionalRouter>$3

filter = <filter>\n\t<then>$1</then>\n\t<else>$2</else>\n</filter>$3

switch = <switch source="$1">\n\t<case regex=\"$2\">$3</case>\n</switch>$4

validate = <validate>\n\t<schema key=\"$1\">$2</schema>\n</validate>$3

resource = <resource methods="GET">\n\t<inSequence />$2\n\t<outSequence />$3\n\t<faultSequence />$4\n</resource>$5

payloadFactory = <payloadFactory media-type="xml">\n\t<format>$1</format>\n\t<args>$2</args>\n</payloadFactory>$3








