
synapse_namsepace = http://ws.apache.org/ns/synapse

definitions = <definitions xmlns="http://ws.apache.org/ns/synapse">\n\n</definitions>

api = <api name="$1" context="$2" xmlns="http://ws.apache.org/ns/synapse">\n\t<resource methods="GET"\
   uri-template="$3">\n\t\t<inSequence>$4</inSequence>\n\t</resource>\n</api>$5

endpoint.parent = <endpoint name="$1" xmlns="http://ws.apache.org/ns/synapse">\n\t<default/>\n</endpoint>$2

inbound = <inboundEndpoint name="$1" sequence="$2" protocol="http" suspend="false" \
  xmlns="http://ws.apache.org/ns/synapse">\n\t<parameters>\n\t\t<parameter name="$3">$4</parameter>\n\t\
  </parameters>\n</inboundEndpoint>$5

proxy = <proxy name="$1" xmlns="http://ws.apache.org/ns/synapse">\n\t<target>\n\t\t<inSequence/>$2\n\t\t<endpoint/>$2\n\t\
  </target>\n</proxy>$4

sequence.parent = <sequence name="$1" xmlns="http://ws.apache.org/ns/synapse">\n\t<log level="custom">$2</log>\n\t\
  <property name="$3" />\n</sequence>$4

registry = <registry provider="$1"></registry>$2

inboundEndpoint = <inboundEndpoint xmlns="http://ws.apache.org/ns/synapse" name="$1" sequence="$2" \
  protocol="http" suspend="false">\n\t<parameters>\n\t\t<parameter name="$3">$4</parameter>\n\t</parameters>\n</inboundEndpoint>$5

localEntry = <localEntry key="$1" xmlns="http://ws.apache.org/ns/synapse">$2\n</localEntry>$3

messageStore = <messageStore name="$1" class="$2" xmlns="http://ws.apache.org/ns/synapse"></messageStore>

messageProcessor = <messageProcessor name="$1" class="$2" messageStore="$3" xmlns="http://ws.apache.org/ns/synapse">\
  \t$4</messageProcessor>$5

task = <task name="$1" class="$2" xmlns="http://ws.apache.org/ns/synapse">\n\t<trigger>$3</trigger>\n</task>$4

template = template

call = <call>\n\t<endpoint/>$1\n</call>

call-template = <call-template target="$1">\n\t<with-param name="$2" value="$3" />\n</call-template>$4

drop = <drop/>

log = <log level="custom"></log>

loopback = <loopback/>

respond = <respond/>

property = <property name="$1" >$2</property>

send = <send>\n\t<endpoint/>$1\n</send>

store = <store messageStore="$1"></store>

conditionalRouter = <conditionalRouter>\n\t<route breakRoute="false">\n\t\t<condition>$1</condition>\n\t\t\
  \<target>$2</target>\n\t</route>\n</conditionalRouter>

filter = <filter>\n\t<then>$1</then>\n\t<else>$2</else>\n</filter>

switch = <switch>\n\t<case regex=\"$1\">$1</case>\n</switch>

validate = <validate>\n\t<schema key=\"$1\">$2</schema>\n</validate>

resource = <resource methods="GET">\n\t<inSequence>$1</inSequence>\n\t<outSequence>$2</outSequence>\n</resource>








